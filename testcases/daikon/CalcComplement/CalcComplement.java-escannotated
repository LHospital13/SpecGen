class CalcComplement {
    /*@ ensures \result != \old(num); */
    public static int calcComplement(int num) {
        int highbit = 0;
        for (int i = 1; i <= 30; ++i) {
            __Loop_Invariant_Dummy1(num, highbit, i);
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        return num ^ mask;
    }

    /*@ requires highbit >= 0; */
    /*@ requires i >= 1; */
    /*@ requires highbit - i + 1 == 0; */
    public static void __Loop_Invariant_Dummy1(int num, int highbit, int i) {}

    /*@ requires args != null; */
    /*@ requires \typeof(args) == \type(java.lang.String[]); */
    /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
    /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
    public static void main(String[] args) {
        calcComplement(-2);
        calcComplement(-1);
        calcComplement(0);
        calcComplement(1);
        calcComplement(2);
        calcComplement(3);
        calcComplement(114);
        calcComplement(514);
        calcComplement(715);
        calcComplement(1919);
        calcComplement(810);
    }
}
